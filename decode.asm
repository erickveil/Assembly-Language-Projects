COMMENT*
	decode.asm
	Erick Veil
	10-17-11
	Accepts an encoded number up to 11 bits
	Decodes value into an 7 bit value
*

EXTRN	GETDEC$:FAR
EXTRN	PUTDEC$:FAR
EXTRN	PUTBIN:FAR
EXTRN	PUTOCT:FAR
EXTRN	PUTSTRNG:FAR
EXTRN	NEWLINE:FAR
EXTRN	PAUSE:FAR
EXTERN	CLEAR:FAR

PAGE		80,132
.MODEL		SMALL,BASIC
.STACK		64
.FARDATA	DSEG
	PACK	DW	0
	CODE	DW	0000000000000000B

	MASK_A	DW	0000000000000111B
	MASK_B	DW	0000000000111000B
	MASK_C	DW	0000000001000000B
	
	MASK_1	DW	0000010101010101B
	MASK_2	DW	0000001100110011B
	MASK_4	DW	0000000011110000B
	MASK_8	DW	0000000000001111B
	
	BADVAL	DW	0000B
	BITSET	DW	0100000000000B
	
	ROT_1	DW	0
	ROT_2	DW	1
	ROT_4	DW	2
	ROT_8	DW	3
	
	TESTVAL	DW	1091
	
	MSG_TITLE	DB	'*** decode.asm by Erick Veil ***';32
	MSG_PROMPT	DB	'Enter number for decoding: ';27
	MSG_INBIN	DB	'Input value in binary:   ' ;25
	MSG_INOCT	DB	'Input value in octal:    '
	MSG_BAD		DB	'Bad bit:                 '
	MSG_OUTBIN	DB	'Decoded value in binary: '
	MSG_OUTOCT	DB	'Decoded value in octal:  '
	MSG_PAUSE	DB	'Press enter to continue.. ' ;26
	SUFX_OCT	DB	'Q' ;1
	SUFX_BIN	DB	'B'
.CODE 
	ASSUME	DS:DSEG,ES:DSEG
MAIN	PROC	FAR

	MOV		AX,	SEG	DSEG
	MOV		DS,AX
	MOV		AX,	SEG	DSEG
	MOV		ES,AX
	
	CALL	HEAD
	
	PUSH	TESTVAL
	CALL	MAKEBAD
	
	PUSH	TESTVAL
	PUSH	BADVAL
	CALL	CORRECTBIT
	
	PUSH	TESTVAL
	PUSH	AX
	PUSH	BADVAL
	CALL	REPORT
	
	
	
.EXIT
MAIN	ENDP

COMMENT*
	CORRECTBIT
	Erick Veil
	10-24-11
	PRE: Pass the packet value and the bad bit value via the stack
	POST: rotates the bitset mask into place based on the bad bit, 
		then flips it, returning the corrected packet via AX
*
CORRECTBIT	PROC	NEAR PUBLIC	PACKET:WORD, PLACE:BYTE
	PUSHF
	
	MOV		AX,BITSET
	MOV		CL,PLACE
	ROR		AX,CL
	
	XOR		PACKET,AX
	MOV		AX,PACKET
	
	POPF
	RET
CORRECTBIT	ENDP

COMMENT*
	ENCODING
	Erick Veil
	10-17-11
	PRE: Pass the 11 bit encoded value via the stack
	POST: Returns 4 bit bad bit value via AX
*
MAKEBAD	PROC	NEAR PUBLIC	PACKET:WORD
	PUSHF
	
	PUSH	PACKET
	PUSH	MASK_8
	PUSH	ROT_8
	CALL	MASKING
	
	PUSH	PACKET
	PUSH	MASK_4
	PUSH	ROT_4
	CALL	MASKING

	PUSH	PACKET
	PUSH	MASK_2
	PUSH	ROT_2
	CALL	MASKING
	
	PUSH	PACKET
	PUSH	MASK_1
	PUSH	ROT_1
	CALL	MASKING
	
	POPF
	RET
MAKEBAD	ENDP

COMMENT*
	MASKING
	Erick Veil
	10-17-11
	PRE: Pass via the stack: PACKET as an 11 bit vlaue with data 
		bits set, BMASK as 11 bit value for the parity mask to be 
		used, then PSHIFT, which is the number of places to 
		shift the parity bit in order to set it. 
	POST: Returns 4 bit value that will deffine the bad bit once
		all bits are set.
	parity bits set
*
MASKING	PROC	NEAR PUBLIC	PACKET:WORD, BMASK:WORD, PSHIFT:BYTE
	PUSHF
	
	MOV		AX,PACKET
	AND		AX,BMASK
	PUSH	AX
	CALL	PARITY
	MOV		CL,PSHIFT
	ROL		AX,CL
	OR		AX,BADVAL
	MOV		BADVAL,AX
	
	POPF
	RET
MASKING	ENDP

COMMENT*
	PARITY
	Erick Veil
	10-16-11
	PRE: PUSH value to be processed
	POST: Counts the number of set bits in the value passed
		and returns wether there is an even or odd number 
		of them via AX.
*
PARITY	PROC	NEAR PUBLIC	BITVAL:WORD
	PUSHF
	
	PUSH	BITVAL
	CALL	BITCOUNT
	PUSH	AX
	CALL	EVENODD
	
	POPF
	RET
PARITY	ENDP

COMMENT*
	BITCOUNT
	Erick Veil
	10-13-11
	Counts the number of bits in a 16 bit binary word
	word is passed on the stack
	Value returned in AL
*
BITCOUNT	PROC	NEAR PUBLIC USES CX BX, BINVAL:WORD
	PUSHF
	MOV		BX,BINVAL	; working value
	MOV		CX,16		; 16 bit count
	SUB		AX,AX		; holds number of 1s
	ROTATE:
		ROL		BX,1
		JNC		NEXT
		; if 1
		INC		AL
	NEXT:
		LOOP	ROTATE	
	POPF
	RET
BITCOUNT	ENDP

COMMENT*
	EVENODD
	Erick Veil
	10-13-11
	Pre: pass a number via the stack
	Post: returns via AX 0 if even, 1 if odd
*
EVENODD		PROC	NEAR PUBLIC	USES CX, ONESCOUNT:WORD
	PUSHF
	MOV		AX,ONESCOUNT
	AND		AX,1
	POPF
	RET
EVENODD		ENDP

HEAD	PROC	NEAR PUBLIC	USES CX 
	PUSHF
	
	CALL	NEWLINE	
	LEA		DI,MSG_TITLE
	MOV		CX,32
	CALL	PUTSTRNG
	CALL	NEWLINE	
	CALL	NEWLINE	
	LEA		DI,MSG_PROMPT
	MOV		CX,27
	CALL	PUTSTRNG
	
	POPF
	RET
HEAD	ENDP

COMMENT*
	REPORT
	Erick Veil
	10-17-11
	PRE: Pass via the stack the input value and the encoded value
	POST: Outputs a report of the code's process
*
REPORT	PROC	NEAR PUBLIC	USES CX BX PACKET:WORD, CODEVAL:WORD, BAD:WORD
	PUSHF
	
	; Input value in binary
	CALL	NEWLINE	
	LEA		DI,MSG_INBIN
	MOV		CX,25
	CALL	PUTSTRNG	
	MOV		AX,PACKET
	MOV		BL,1
	CALL	PUTBIN
	LEA		DI,SUFX_BIN
	MOV		CX,1
	CALL	PUTSTRNG	
	
	; Input Value in Octal
	CALL	NEWLINE	
	LEA		DI,MSG_INOCT
	MOV		CX,25
	CALL	PUTSTRNG
	CALL	PUTOCT
	LEA		DI,SUFX_OCT
	MOV		CX,1
	CALL	PUTSTRNG	
	
	; bad bit
	CALL	NEWLINE	
	LEA		DI,MSG_BAD
	MOV		CX,25
	CALL	PUTSTRNG
	MOV		AX,BAD
	MOV		BL,1
	CALL	PUTDEC$
	
	; Decoded value binary
	CALL	NEWLINE	
	LEA		DI,MSG_OUTBIN
	MOV		CX,25
	CALL	PUTSTRNG	
	MOV		AX,CODEVAL
	CALL	PUTBIN
	LEA		DI,SUFX_BIN
	MOV		CX,1
	CALL	PUTSTRNG

	;decoded value in octal
	CALL	NEWLINE	
	LEA		DI,MSG_OUTOCT
	MOV		CX,25
	CALL	PUTSTRNG
	CALL	PUTOCT
	LEA		DI,SUFX_OCT
	MOV		CX,1
	CALL	PUTSTRNG	

	CALL	NEWLINE	
	LEA		DI,MSG_PAUSE
	MOV		CX,26
	CALL	PAUSE
	
	POPF
	RET
REPORT	ENDP

END		MAIN
